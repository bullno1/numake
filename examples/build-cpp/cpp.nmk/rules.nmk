build_dir = ${build_dir:-.build}
c_compiler = gcc
cpp_compiler = g++
linker = g++
c_flags = ${c_flags:--Wall}
cpp_flags = ${cpp_flags:--Wall}

# A phony rule to register target as an executable
exe:%: ${build_dir}/exe-${m} << sources build_dir ! live
	cp ${build_dir}/exe-${m} $m

# A temporary file will be built in the build directory.
# This is to avoid linking if object files are not changed.
$build_dir/exe-%: << sources build_dir linker
	objs=
	for file in ${sources}
	do
		obj_file="${build_dir}/${file}.o"
		objs="${objs} ${obj_file}"
	done
	${NUMAKE} --depend ${objs}

	mkdir -p $(dirname $@)
	${linker} -o $@ ${objs}

# Compiling *.cpp and compiling *.c are pretty similar so we extract the common
# parts into a shell script

compile = $(readlink -f compile.sh)

$build_dir/%.c.o: ${compile} %.c << compile build_dir c_compiler c_flags
	${deps} "$@" "${c_compiler}" "${c_flags}"

$build_dir/%.cpp.o: ${compile} %.cpp << compile build_dir cpp_compiler cpp_flags
	${deps} "$@" "${cpp_compiler}" "${cpp_flags}"
