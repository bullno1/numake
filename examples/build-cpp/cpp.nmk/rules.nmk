BUILD_DIR = ${BUILD_DIR:-.build}
C_COMPILER = ${C_COMPILER:-gcc}
CPP_COMPILER = ${CPP_COMPILER:-g++}
LINKER = ${LINKER:-g++}
C_FLAGS = ${C_FLAGS:--Wall}
CPP_FLAGS = ${CPP_FLAGS:--Wall}

# A phony rule to register target as an executable
exe:%: ${BUILD_DIR}/exe-% << BUILD_DIR ! live
	cp ${BUILD_DIR}/exe-${m} $m

# A temporary file will be built in the build directory.
# This is to avoid linking if object files are not changed.
$BUILD_DIR/exe-%: << sources BUILD_DIR linker LINKER
	objs=
	for file in ${sources}
	do
		obj_file="${BUILD_DIR}/${file}.o"
		objs="${objs} ${obj_file}"
	done
	${NUMAKE} --depend ${objs}
	${NUMAKE} --order-only $(dirname $@)/

	${linker:-${LINKER}} -o $@ ${objs}

# Compiling *.cpp and compiling *.c are pretty similar so we extract the common
# parts into a shell script

COMPILE = $(readlink -f compile.sh)

$BUILD_DIR/%.c.o: ${COMPILE} %.c << COMPILE c_compiler C_COMPILER c_flags C_FLAGS
	${deps} "$@" "${c_compiler:-${C_COMPILER}}" "${c_flags:-${C_FLAGS}}"

$BUILD_DIR/%.cpp.o: ${COMPILE} %.cpp << COMPILE compile cpp_compiler CPP_COMPILER cpp_flags CPP_FLAGS
	${deps} "$@" "${cpp_compiler:-${CPP_COMPILER}}" "${cpp_flags:-${C_FLAGS}}"

$BUILD_DIR/%/:
	mkdir -p $@
