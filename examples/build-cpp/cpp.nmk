build_dir = ${build_dir:-.build}

# A phony rule to register target as an executable
exe:%: ${build_dir}/exe-${m} << sources build_dir ! live
	cp ${build_dir}/exe-${m} $m

# A temporary file will be built in the build directory.
# This is to avoid linking if object files are not changed.
$build_dir/exe-%: << sources build_dir
	objs=
	for file in ${sources}
	do
		obj_file="${build_dir}/${file}.o"
		objs="${objs} ${obj_file}"
	done
	${NUMAKE} --depend ${objs}

	mkdir -p $(dirname $@)
	g++ -o $@ ${objs}

%.c.o: ${m#${build_dir}/}.c << build_dir
	mkdir -p $(dirname $@)
	gcc -c ${deps} -o $@ -MMD -MF $@.d
	headers=
	for file in `cat $@.d`
	do
		case ${file} in
			\\|*:|${deps})
				continue
			;;
			*)
				headers="${headers} ${file}"
			;;
		esac
	done
	${NUMAKE} --depend ${headers}

%.cpp.o: ${m#${build_dir}/}.cpp << build_dir
	mkdir -p $(dirname $@)
	g++ -c ${deps} -o $@ -MMD -MF $@.d
	headers=
	for file in `cat $@.d`
	do
		case ${file} in
			\\|*:|${deps})
				continue
			;;
			*)
				headers="${headers} ${file}"
			;;
		esac
	done
	${NUMAKE} --depend ${headers}
